--!strict
-- this script was generated by nightcycle/datatree, do not manually edit

--Services
local RunService = game:GetService("RunService")

--Packages
local NetworkUtil = require(game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("NetworkUtil"))
local Maid = require(game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Maid"))
local ServiceProxy = require(game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("ServiceProxy"))

--Modules
local DataTypes = require(game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("DataTreeTypes"))

--Types
type Maid = Maid.Maid
export type Receiver<T> = () -> T
export type VehicleType = DataTypes.VehicleType
export type PermissionData = DataTypes.PermissionData
export type PerformanceData = DataTypes.PerformanceData
export type VehicleData = DataTypes.VehicleData

export type DataTree = {
	CompanyName: Receiver<string>,
	State: Receiver<string>,
	Location: Receiver<CFrame>,
	init: (maid: Maid) -> nil,
	Currency: {
		Cash: Receiver<number>,
		VehicleCredits: Receiver<number>,
	},
	Garage: {
		Slots: Receiver<{[number]: VehicleData}>,
		Permissions: Receiver<{[number]: PermissionData?}>,
	},
}

--Constants
local GET_SUFFIX = "DATA_TREE_CLT_GET"
local UPDATE_SUFFIX = "DATA_TREE_CLT_UPDATE"

-- Class
local tree: DataTree = {} :: any
local values = {}
function tree.init(maid: Maid): nil
	local function newReceiver<T>(scope: string): Receiver<T>
		local updateKey = scope .. "_" .. UPDATE_SUFFIX
		local getKey = scope .. "_" .. GET_SUFFIX

		if RunService:IsRunning() then
			maid:GiveTask(NetworkUtil.onClientEventAt(updateKey, game.Players.LocalPlayer, function(val)
				values[scope] = val
			end))
			values[scope] = NetworkUtil.invokeServerAt(getKey, game.Players.LocalPlayer)
		else
			local bindableEvent = NetworkUtil.getBindableEvent(updateKey)
			maid:GiveTask(bindableEvent.Event:Connect(function(val)
				values[scope] = val
			end))
			local bindableFunction = NetworkUtil.getBindableFunction(getKey)
			values[scope] = bindableFunction:Invoke()
		end

		return function(): T
			return values[scope] :: any
		end
	end

	tree = {
		["CompanyName"] = newReceiver("CompanyName"),
		["State"] = newReceiver("State"),
		["Currency"] = {
			["Cash"] = newReceiver("Currency/Cash"),
			["VehicleCredits"] = newReceiver("Currency/VehicleCredits"),
		},
		["Location"] = newReceiver("Location"),
		["Garage"] = {
			["Slots"] = newReceiver("Garage/Slots"),
			["Permissions"] = newReceiver("Garage/Permissions"),
		},
		["init"] = function(maid: Maid) return nil end,
	}
	return nil
end

return ServiceProxy(function()
	return tree
end)