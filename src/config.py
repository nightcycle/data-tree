import yaml
import os
from typing import Any, TypedDict, Literal

CONFIG_PATH = "datatree.yaml"
DEFAULT_TABLE = {
	"domain_name": "gamedata",
	"build": {
		"shared_types_roblox_path": "game/ReplicatedStorage/Shared/DataTreeTypes",
		"out": {
			"client_path": "src/Client/DataTree.luau",
			"shared_path": "src/Shared/DataTreeTypes.luau",
			"server_path": "src/Server/DataTreeService.luau",
		},
	},
	"metadata": {},
	"types": {},
	"tree": {

	}
}

SERVICE_PROXY_PATH = "nightcycle/service-proxy@1.0.0"
NETWORK_UTIL_WALLY_PATH = "nightcycle/network-util@1.7.0"
MAID_WALLY_PATH = "nightcycle/maid@1.1.4"
SIGNAL_WALLY_PATH = "nightcycle/signal@1.0.2"

HEADER_WARNING = "-- this script was generated by nightcycle/datatree, do not manually edit"

GET_SUFFIX_KEY = "DATA_TREE_CLT_GET"
UPDATE_SUFFIX_KEY = "DATA_TREE_CLT_UPDATE"

class OutConfig(TypedDict):
	client_path: str
	shared_path: str
	server_path: str

class BuildConfig(TypedDict):
  shared_types_roblox_path: str
  out: OutConfig

class DataConfig(TypedDict):
	domain_name: str
	build: BuildConfig
	metadata: dict
	types: dict
	tree: dict

def init():
	assert os.path.exists(CONFIG_PATH) == False, "datatree is already initialized"
	file = open(CONFIG_PATH, "w")
	file.write(yaml.safe_dump(DEFAULT_TABLE))
	file.close()

def get_data_config() -> DataConfig:
	assert os.path.exists(CONFIG_PATH) == True, "datatree is not initialized"
	file = open(CONFIG_PATH, "r")
	data: Any = yaml.safe_load(file.read())
	file.close()
	return data 	